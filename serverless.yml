service: customer-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}

functions:
  api:
    handler: src/handlers/index.handler
    events:
      - http:
          path: /health
          method: get
          cors: true
      - http:
          path: /api/customers
          method: get
          cors: true
      - http:
          path: /api/customers
          method: post
          cors: true
      - http:
          path: /api/customers/{id}
          method: delete
          cors: true
      - http:
          path: /api/customers/{id}
          method: put
          cors: true
      - http:
          path: /api/customers/{id}
          method: get
          cors: true
          
resources:
  Resources:
    CustomersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline
  - serverless-esbuild

custom:
  serverless-offline:
    httpPort: 3000
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    platform: 'node'
    outdir: '.build'
    keepOutputDirectory: false
